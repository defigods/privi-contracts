// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IPRIVIPodERC1155RoyaltyFactory {

  event PodCreated(string indexed uri, address podAddress);

  /**
   * @notice  Assigns `MODERATOR_ROLE` to SwapManager contract
   * @param   swapManagerAddress The SwapManager contract address
   */
  function assignRoleSwapManager(address swapManagerAddress) external;

  //TODO: getTotalTokenCreated()

  /**
   * @notice Returns the contract address of the Pod token
   * @param  uri The Pod URI
   * @return podAddress The contract address of the Pod token
   */
  function getPodAddressByUri(string calldata uri)
    external
    view
    returns (address podAddress);

  /**
   * @notice Returns the contract address of the Pod token
   * @param  podId The Pod Id
   * @return podAddress The contract address of the Pod token
   */
  function getPodAddressById(string calldata podId)
    external
    view
    returns (address podAddress);

  /**
   * @notice Creates a royalty ERC1155 Pod token and registers it in the BridgeManager
   * @dev    - Pod URI must not exist
   * @param  uri The base URI
   * @param  royaltyAmount The royalty amount to be transfer to the creator
   * @param  creator The Pod token creator
   * @return podAddress The contract address of the Pod token created
   */
  function createPod(
    string calldata uri,
    string calldata podId,
    uint256 royaltyAmount,
    address creator
  ) external returns (address podAddress);

  /**
   * @notice Creates a royalty ERC1155 Pod token generated by multiple 
   * creators and registers it in the BridgeManager
   * @dev    - Pod URI must not exist
   * @param  uri The base URI
   * @param  royaltyAmount The royalty amount to be transfer to the creator
   * @param  royaltyShares An array of royalty amounts to be shared to creators
   * @param  creators An array of Pod token creators to receive royalties
   * @return podAddress The contract address of the Pod token created
   */
  function createMultiCreatorPod(
    string calldata uri,
    string calldata podId,
    uint256 royaltyAmount,
    uint256[] memory royaltyShares,
    address[] memory creators
  ) external returns (address podAddress);

  /**
   * @notice Mints ERC1155 Pod tokens
   * @dev    - The caller must be MODERATOR_ROLE
   *         - destination address can't be zero
   *         - amount to be minted must be greater than zero
   * @param  uri The base URI
   * @param  account The destination account to receive minted tokens
   * @param  tokenId The Pod token identifier
   * @param  amount The amount of tokens to be minted
   * @param  data The data to be added (currently not used)
   */
  function mintPodTokenByUri(
    string calldata uri,
    address account,
    uint256 tokenId,
    uint256 amount,
    bytes calldata data
  ) external;

  /**
   * @notice Mints ERC1155 Pod tokens
   * @dev    - The caller must be MODERATOR_ROLE
   *         - destination address can't be zero
   *         - amount to be minted must be greater than zero
   * @param  podId The Pod Id
   * @param  account The destination account to receive minted tokens
   * @param  tokenId The Pod token identifier
   * @param  amount The amount of tokens to be minted
   * @param  data The data to be added (currently not used)
   */
  function mintPodTokenById(
    string calldata podId,
    address account,
    uint256 tokenId,
    uint256 amount,
    bytes calldata data
  ) external;

  /**
   * @notice Mints a batch of ERC1155 Pod tokens
   * @dev    - The caller must be MODERATOR_ROLE
   *         - destination address can't be zero
   *         - amount to be minted must be greater than zero
   * @param  uri The base URI
   * @param  account The destination account to receive minted tokens
   * @param  tokenIds An array of Pod token identifiers
   * @param  amounts An array of token amounts to be minted
   * @param  data The data to be added (currently not used)
   */
  function batchMintPodTokenByUri(
    string calldata uri,
    address account,
    uint256[] memory tokenIds,
    uint256[] memory amounts,
    bytes calldata data
  ) external;

  /**
   * @notice Mints a batch of ERC1155 Pod tokens
   * @dev    - The caller must be MODERATOR_ROLE
   *         - destination address can't be zero
   *         - amount to be minted must be greater than zero
   * @param  podId The Pod Id
   * @param  account The destination account to receive minted tokens
   * @param  tokenIds An array of Pod token identifiers
   * @param  amounts An array of token amounts to be minted
   * @param  data The data to be added (currently not used)
   */
  function batchMintPodTokenById(
    string calldata podId,
    address account,
    uint256[] memory tokenIds,
    uint256[] memory amounts,
    bytes calldata data
  ) external;
}
